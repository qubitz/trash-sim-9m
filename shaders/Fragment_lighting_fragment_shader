#version 330

// shadorum fragmentum 

in vec4 color;
in vec4 color2;
out vec4 frag_color;
uniform sampler2D gSampler;

// pre-fragment interpolated values from the vertex shader
in vec3 fN;
in vec3 fL;
in vec3 fE;

uniform vec4 AmbientProduct, DiffuseProduct, SpecularProduct;
uniform mat4 ModelView;
uniform vec4 LightPosition;
uniform float Shininess;

uniform int controlSwitch; // The switch to alternate between vertex and fragment lighting
                           // 0 for fragment, 1 for vertex.

void main()
{
   if(controlSwitch == 0)
   {
      vec3 N = normalize(fN);
      vec3 E = normalize(fE);
      vec3 L = normalize(fL);

      vec3 H = normalize( L + E );
      vec4 ambient = AmbientProduct;

      float Kd = max(dot(L,N), 0.0);
      vec4 diffuse = Kd * DiffuseProduct;

      float Ks = pow(max(dot(N,H), 0.0), Shininess);
      vec4 specular = Ks * SpecularProduct;

      // discard the specular highlight if the light's behind
      if( dot(L,N) < 0.0 )
         specular = vec4(0.0, 0.0, 0.0, 1.0);

      frag_color = ambient + diffuse + specular + texture(gSampler, color.xy);

      frag_color.a = 1.0;
   }
   else
   {
      frag_color = color + texture(gSampler, color2.xy);
      frag_color.a = 1.0;
   }
}
